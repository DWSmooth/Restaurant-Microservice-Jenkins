pipeline {
    agent any
    // environment {
    //     tempPswd = "${powershell -c 'aws ecr get-login-password --region us-east-1'}"
    // }
    stages {
        stage("docker login") {
            steps {
                pwsh('echo "entered first stage!"')
                withAWS(credentials:'ECRCreds') {
                    script {
                        tempPswd = pwsh(
                            returnStdout: true,
                            script: 'aws ecr get-login-password --region us-east-1'
                        )
                    }
                    pwsh('echo "have creds!"')
                    // pwsh("echo ${tempPswd}")
                    // pwsh('echo "first one: ${tempPswd}"')
                    // pwsh('echo "second one: ${tempPswd}"')
                    // pwsh("aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 347673321751.dkr.ecr.us-east-1.amazonaws.com")
                    pwsh("echo ${tempPswd} | docker login --username AWS --password-stdin 347673321751.dkr.ecr.us-east-1.amazonaws.com")
                }
            }
        }
        stage("install common library") {
            steps {
                // withAWS(credentials:'ECRCreds') {
                //     echo "${ecrLogin()}"
                // }
                // Remove Common-Library folder if it's already there
                // bat 'rmdir \"Common-Library\" /S /Q'
                // Clone the common library git repo
                bat 'git clone https://github.com/april2022-j-capstone/common-library.git'
                // Switch to the common library repo root
                dir("Common-Library") {
                    // Switch to common library dev branch
                    bat 'git checkout dev'
                    // Maven clean install
                    bat 'mvn -X clean install'
                }
            }
        }
        stage("build microservice") {
            steps {
                // Switch to the main repo package
                dir("restaurant-microservice") {
                    // Maven clean package to produce jar
                    bat 'mvn -X clean package'
                    archiveArtifacts artifacts: 'target/*.jar'
                }
            }
        }
        stage("publish build to ECR") {
            steps {
                // Make docker image and push to ECR
                // withAWS(credentials:'ECRCreds') {
                //     pwsh script: "${ecrLogin()}"
                // }
                pwsh script: 'docker build -t scrumbags-restaurant .'
                pwsh script: 'docker tag scrumbags-restaurant:latest 347673321751.dkr.ecr.us-east-1.amazonaws.com/scrumbags-restaurant:latest'
                pwsh script: 'docker push 347673321751.dkr.ecr.us-east-1.amazonaws.com/scrumbags-restaurant:latest'
            }
        }
    }
    post {
        always{ 
            bat 'rmdir \"restaurant-microservice\\target\" /S /Q'
            bat 'rmdir \"Common-Library\" /S /Q'
        }
    }
}